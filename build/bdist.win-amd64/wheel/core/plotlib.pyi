from typing import *
import numpy as np
from core import typecheck as typecheck
from dataclasses import dataclass
from enum import Enum
from matplotlib.axes import Axes

@dataclass
class DataLabel:
    X_label: Optional[str]
    X_unit: Optional[str]
    Y_label: Optional[str]
    Y_unit: Optional[str]
    def __init__(self, X_label, X_unit, Y_label, Y_unit) -> None: ...

class DataLabels(Enum):
    UV = ...
    FL = ...
    CD = ...
    IR = ...

@dataclass(frozen=True)
class XYData:
    X: np.ndarray
    Y: np.ndarray
    DataLabel: DataLabel
    Title: str = ...
    def rename_labels(self, X_label: Optional[str] = None, Y_label: Optional[str] = None, Title: Optional[str] = None) -> XYData: ...
    def __init__(self, X, Y, DataLabel, Title=...) -> None: ...

@dataclass
class PlotOption:
    color: Optional[str]
    marker: Optional[str]
    linestyle: Optional[str]
    linewidth: Optional[float]
    def __init__(self, color, marker, linestyle, linewidth) -> None: ...

class PlotOptions(Enum):
    paper = ...
    presentation_white = ...
    presentation_black = ...

@dataclass
class FigureOption:
    size: Tuple[float, float]
    plot_option: PlotOption
    plot_option_override: bool = ...
    def __init__(self, size, plot_option, plot_option_override=...) -> None: ...

class FigureOptions(Enum):
    papar = ...
    presentation_white = ...
    presentation_black = ...

def load_1ddata(path: str) -> XYData: ...
def load_2ddata(path: str) -> list[XYData]: ...
def load_data(p: str) -> list[XYData]: ...
def plot_old(data: XYData, figure_option: FigureOption = ..., save_path: Optional[str] = None): ...
def plot_simple(ax: Axes, data: XYData, plot_option: PlotOption = ...) -> None: ...
def plot1d(ax: Axes, data: XYData, plot_option: PlotOption = ..., range: Optional[Tuple[float, float]] = None) -> None: ...
def plot2d(ax: Axes, data: List[XYData], plot_option: PlotOption = ..., range: Optional[Tuple[float, float]] = None) -> None: ...
