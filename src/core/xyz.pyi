import abc
import numpy as np
from _typeshed import Incomplete
from core.molecules import AtomBase as AtomBase, IMolecule as IMolecule, Substructure as Substructure
from dataclasses import dataclass
from scipy.spatial.transform import Rotation

gaussian_param_default: str

def format_float(f: float | int) -> str: ...

@dataclass
class XyzAtom(AtomBase):
    charge: float | None = ...
    def __init__(self, symbol, index, coordinate, charge=...) -> None: ...

@dataclass
class XyzMolecule(IMolecule, metaclass=abc.ABCMeta):
    name: str
    index: int
    children: list[XyzAtom]
    @staticmethod
    def cast(mol: IMolecule) -> XyzMolecule: ...
    @classmethod
    def make_from(cls, mol: IMolecule, name: str, index: int) -> XyzMolecule: ...
    def translate(self, coordinate: np.ndarray): ...
    def rotate(self, rotation: Rotation): ...
    def get_children(self) -> list[AtomBase]: ...
    @classmethod
    def make(cls, atoms: list[AtomBase]): ...
    def inner_move_to_xz_plane(self, target_atoms: list[XyzAtom]): ...
    def get_inner_center(self) -> np.ndarray: ...
    @classmethod
    def from_xyz_file(cls, path: str): ...
    @classmethod
    def from_mol2_file(cls, path: str): ...
    def save_xyz(self, filename: str | None = None): ...
    def generate_gaussian_input(self, dir_path: str, gaussan_pram: str | None = None) -> None: ...
    def sizeofAtoms(self) -> int: ...
    def __init__(self, name, index, children) -> None: ...

class XyzSubstructure(Substructure):
    molecules: Incomplete
    name: Incomplete
    def __init__(self, elements: list[XyzMolecule], name: str) -> None: ...
    @classmethod
    def from_Substructure(cls, sub: Substructure): ...
    def extract_xyz(self, filename: str) -> None: ...
    def generate_gaussian_input(self, dir_path: str, gaussan_pram: str | None = None, fragment: bool = False) -> None: ...
