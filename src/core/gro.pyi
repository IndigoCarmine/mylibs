from dataclasses import dataclass

import numpy as np
from scipy.spatial.transform import Rotation

from core.molecules import AtomBase as AtomBase
from core.molecules import IMolecule as IMolecule
from core.molecules import Substructure as Substructure

class GroAtom(AtomBase):
    atom_name: str
    residue_name: str
    residue_number: int
    index: int
    coordinate: np.ndarray
    symbol: str
    def __init__(self, atom_number: int, atom_name: str, residue_name: str, residue_number: int, coordinate: np.ndarray) -> None: ...
    @property
    def atom_symbol(self): ...
    @classmethod
    def from_gro_line(cls, line: str): ...
    def __deepcopy__(self, memo) -> GroAtom: ...

@dataclass
class GroFile(IMolecule[GroAtom]):
    title: str
    atoms: list[GroAtom]
    box_x: float
    box_y: float
    box_z: float
    def __len__(self) -> int: ...
    def find_atom(self, index: int) -> list[GroAtom]: ...
    def generate_gro_text(self) -> list[str]: ...
    @classmethod
    def from_gro_text(cls, lines: list[str]) -> GroFile: ...
    @classmethod
    def from_gro_file(cls, file_path: str) -> GroFile: ...
    def save_gro(self, file_path: str): ...
    def renumber(self, start: int = 1): ...
    def set_residue_number(self,number:int):...
    def generate_xyz_text(self) -> list[str]: ...
    def save_xyz(self, file_path: str): ...
    def load_xyz_text(self, data: list[str], multiple_molecules: bool = False): ...
    def load_xyz_file(self, file_path: str, multiple_molecules: bool = False): ...
    def get_children(self) -> list[GroAtom]: ...
    def get_child(self, index: int) -> GroAtom: ...
    def translate(self, coordinate: np.ndarray): ...
    def rotate(self, rotation: Rotation): ...
    @classmethod
    def make(cls, atoms: list[AtomBase]) -> GroFile: ...
    def __init__(self, title, atoms, box_x, box_y, box_z) -> None: ...
