import abc
from abc import ABCMeta, abstractmethod
from dataclasses import dataclass
from typing import Iterable

import numpy as np
from scipy.spatial.transform import Rotation


class IObject(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self) -> None: ...
    @abstractmethod
    def translate(self, coordinate: np.ndarray) -> None: ...
    @abstractmethod
    def rotate(self, rotation: Rotation) -> None: ...


@dataclass
class AtomBase:
    symbol: str
    index: int
    coordinate: np.ndarray
    @classmethod
    def cast(cls, atom: "AtomBase") -> "AtomBase": ...
    def __init__(self, symbol: str, index: int, coordinate: np.ndarray) -> None: ...


class IMolecule[Atom: AtomBase](IObject, metaclass=abc.ABCMeta):
    @abstractmethod
    def get_children(self) -> list[Atom]: ...
    @abstractmethod
    def get_child(self, index: int) -> Atom: ...
    @classmethod
    def make(cls, atoms: list[AtomBase]) -> "IMolecule[Atom]": ...


class Substructure[A: AtomBase](IObject, Iterable[IMolecule[A]]):
    molecules: list[IMolecule[A]]
    def __init__(self, elements: list[IMolecule[A]]) -> None: ...
    def get_children(self) -> list[IMolecule[A]]: ...
    def translate(self, coordinate: np.ndarray) -> None: ...
    def rotate(self, rotation: Rotation) -> None: ...
    def __iter__(self) -> Iterable[IMolecule[A]]: ...
    def press(self) -> list[A]: ...
    def as_molecule(self, type: type[IMolecule[A]]) -> IMolecule[A]: ...
