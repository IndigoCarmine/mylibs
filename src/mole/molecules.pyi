import abc
from abc import ABCMeta, abstractmethod
from ast import TypeVar as TypeVar
from dataclasses import dataclass
from symtable import Symbol as Symbol
from typing import Iterable

import numpy as np
from scipy.spatial.transform import Rotation

class IObject(metaclass=ABCMeta):
    @abstractmethod
    def __init__(self): ...
    @abstractmethod
    def translate(self, coordinate: np.ndarray): ...
    @abstractmethod
    def rotate(self, rotation: Rotation): ...

@dataclass
class AtomBase:
    symbol: str
    index: int
    coordinate: np.ndarray
    @classmethod
    def cast(cls, atom: AtomBase) -> AtomBase: ...
    def __init__(self, symbol, index, coordinate) -> None: ...

class IMolecule[Atom: AtomBase](IObject, metaclass=abc.ABCMeta):
    @abstractmethod
    def get_children(self) -> list[Atom]: ...
    @abstractmethod
    def get_child(self, index: int) -> Atom: ...
    @classmethod
    def make(cls, atoms: list[Atom]): ...

class Substructure[A: AtomBase, T: IMolecule[A]](IObject, Iterable[T]):
    molecules: list[T]
    def __init__(self, elements: list[T]) -> None: ...
    def get_children(self) -> list[T]: ...
    def translate(self, coordinate: np.ndarray): ...
    def rotate(self, rotation: Rotation): ...
    def __iter__(self): ...
    def press(self) -> list[A]: ...
    def as_molecule(self, type: type[IMolecule]) -> T: ...
