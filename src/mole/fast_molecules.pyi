import mole.molecules as mol
import numpy as np
from scipy.spatial.transform import Rotation

class FastStructWapper[T: mol.IMolecule]():
    def __init__(self, molecule: T): ...
    @classmethod
    def from_substructure(
        cls, substructure: mol.Substructure
    ) -> "FastStructWapper": ...
    def translate(self, coordinate: np.ndarray): ...
    def rotate(self, rotation: Rotation): ...
    def generate_as_molecule(self, Type: type) -> T: ...
    def replicate(self, n: int): ...
    def reset(self): ...
    def translate_one(self, index: int, coordinate: np.ndarray): ...
    def rotate_one(self, index: int, rotation: Rotation): ...
    def linear_translate(self, vector: np.ndarray): ...
    def linear_rotate(self, rotation: Rotation): ...
    def is_too_close(self, distance: float = 0.095) -> bool: ...
